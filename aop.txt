AOP的定义：Aspect Oriented Programming，面向切面编程。
功能
可以在方法执行前和执行后以及执行失败后插入逻辑。
适用场景
在方法执行前执行后都需要执行的代码可以抽取出来，达到代码复用的目的。
如日志记录，耗时计时器，失败重试，权限验证等。
优点
将通过功能提取出来，使方法仅包含业务逻辑代码，代码量大幅度减少，提高代码的可读性。

实现方式有两种
动态代理和静态织入。
动态代理有 Castle DynamicProxy。
动态代理有一些限制：
允许插入切面的方法必须是虚方法。
允许插入切面的类必须有接口，实现类和代理类都要继承这个接口。
调用时，要先生成一个代理类，通过代理类调用方法。
个人不喜欢动态代理，因为它改变了我们常规开发的思路，在开发业务类时，需要考虑AOP，底层模块不能假设上层调用者会做什么，或者为了能够让自己被使用，约束上层的开发，限制了开发自由，得不偿失，不推荐使用。

静态织入。
能够影响编译器，在编译的时候，就将切面的逻辑以IL代码的形式编译进去，性能比动态代理高。
编写业务类的时候不需要考虑AOP.
业务类的开发和AOP的开发相互独立，解耦合，模块化，在需要使用AOP的时候，加上AOP特性即可。

PostSharp和Fody

OnMethodBoundaryAspect

OnEntry
OnExit
OnException
OnSuccess

实战项目

日志：入口参数，返回值，失败或成功
计时器：方法执行耗时，统计机器的UPH，每个动作的时长，优化设备的UPH
自动重试：相机拍照，扫码。
手动重试：气缸，轴运动。可视化界面，打开调试界面，理顺气缸。
权限认证，一些参数的配置，只能是管理员去配置。
返回值检查。